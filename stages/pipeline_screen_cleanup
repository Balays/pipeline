#!/usr/bin/env perl 

use strict;
use warnings;
no warnings('once');

use Pipeline;
use Pipeline_Conf;

use Getopt::Long;
use File::Copy;
use File::Basename;

my $stage="pipeline_screen";
my $revision = "0";
my $version = $Pipeline_Conf::pipeline_version.".".$revision;
my $index_dir = $Pipeline_Conf::bowtie_indexes;
my $runcmd="bowtie";

# options
my $job_num = "";
my $fasta_file = "";
my $index = "";
my $threads = "";
my $ver = "";
my $help = "";
my $options = GetOptions ("job=i" => \$job_num,
			  "fasta=s"=> \$fasta_file,
			  "index=s" => \$index,
			  "threads=i" => \$threads,
			  "version" => \$ver,
			  "help" => \$help,
			 );

if ( $ver ) {
  print STDERR "$stage - $version\n";
  exit(0);
} elsif ( $help or !($job_num and $fasta_file)){
  print STDERR "Usage: $stage -j <job number> -f <fasta file> -i <bowtie index> -t <threads>\n";
  exit(1);
} 

unless ( -e $index or -e $index.".1.ebwt" or $index_dir."/".$index.".1.ebwt" ){
  print STDERR "Usage: $stage -j <job number> -f <fasta file> -i <bowtie index> -t <threads>\n";
  print STDERR "[error] could not find index files";
  exit(1);
  
} else {
  unless ( -e $index or -e $index.".1.ebwt" ){
    $index = $index_dir."/".$index;
  }
}

unless ( $threads ) {
  $threads = 1;
}

my $log = Pipeline::logger($job_num);

unless (-e $fasta_file){
  $log->error("file: $fasta_file does not exist");
  exit(1);
}

sub fail {
  my ($log, $message) = @_;
  $log->error($message);
  exit(1);
}

$log->info("Starting $stage ".basename($index)." on job: $job_num");

# update jobcache stage status
Pipeline::update_stage_info($job_num, "cluster_".basename($index), "running");

my $job_dir = $Pipeline_Conf::global_job_dir."/".$job_num;
my $proc_dir = $job_dir."/proc";
my $run_dir = $proc_dir."/".$stage."_".basename($index);

# create directories
if(-d $run_dir){
  my $t = time;
  $log->info("found $run_dir, moving to $run_dir.$t");
  move($run_dir, $run_dir.".".$t) or fail($log, "$!");
} 
mkdir($run_dir) or fail($log, "Could not mkdir: $run_dir, $!");

my $input_file = "";
my $index_name = basename($index);
system("seqUtil --bowtie_truncate -i $fasta_file -o $run_dir/bowtie.input") == 0 or fail($log, "job: $job_num - seqUtil --bowtie_truncate ran into some error");
system("diff $fasta_file $run_dir/bowtie.input > $run_dir/input.diff");
if ( -s $run_dir."/input.diff" > 0 ){
  system("seqUtil --sortbyid -i $fasta_file -o $run_dir/input.sorted") == 0 or fail($log, "job: $job_num - seqUtil --sortbyid ran into some error");
  $input_file = $run_dir."/bowtie.input";
  unlink($run_dir."/input.diff");
} else {
  $input_file = $fasta_file;
  unlink($run_dir."/input.diff");
  unlink($run_dir."/bowtie.input");
}

system("$runcmd --suppress 5,6 -p $threads --al $run_dir/aligned_$index_name.fna --un $run_dir/unaligned_reads.fna -f -t $index $input_file > $run_dir/aligned_$index_name.$runcmd 2> $run_dir/$runcmd.out") == 0 or fail($log, "$runcmd $fasta_file $index failed on job: $job_num, see $run_dir/$runcmd.out for details."); 

my $aligned = `grep "No alignments" $run_dir/bowtie.out`;
chomp $aligned;
if ($aligned eq "No alignments") {
  copy($fasta_file, $proc_dir."/input/screened_$index_name.fna");
  unlink($run_dir."/input.sorted") if -e $run_dir."/input.sorted";
  unlink($run_dir."/bowtie.input") if -e $run_dir."/bowtie.input";
  unlink($run_dir."/unaligned_reads.fna") if -e $run_dir."/unaligned_reads.fna";
} else {
  if ($input_file eq $fasta_file) {
    copy($run_dir."/unaligned_reads.fna", $proc_dir."/input/screened_$index_name.fna");   
  } 
  else {
    system("cut -f1 $run_dir/aligned_$index_name.$runcmd | sort > $run_dir/aligned.ids");
    system("seqUtil --remove_seqs -i $run_dir/input.sorted -o $run_dir/unaligned_reads.fna -l $run_dir/aligned.ids") == 0 or fail($log, "job: $job_num - seqUtil --remove_seqs ran into some error");
    unlink($run_dir."/input.sorted") if -e $run_dir."/input.sorted";
    unlink($run_dir."/bowtie.input") if -e $run_dir."/bowtie.input";
    copy($run_dir."/unaligned_reads.fna", $proc_dir."/input/screened_$index_name.fna");   
  }
  
  copy($run_dir."/aligned_$index_name.fna", $job_dir."/downloads/aligned_$index_name.fna");
  copy($run_dir."/aligned_$index_name.".$runcmd, $job_dir."/downloads/aligned_$index_name.$runcmd");
}

$log->info("Finished $stage ".basename($index)." on job: $job_num");
# update jobcache stage status
Pipeline::update_stage_info($job_num, "cluster_".basename($index), "completed");
exit(0);

