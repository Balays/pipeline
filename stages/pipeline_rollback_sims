#!/usr/bin/env perl 

use strict;
use warnings;
no warnings('once');

use Pipeline;
use Pipeline_Conf;

use Cache::Memcached;
use Getopt::Long;
use File::Copy;
use File::Basename;
use POSIX qw(strftime);
umask 000;

my $stage_name="rollback_sims";
my $stage;
for my $s (@{$Pipeline_Conf::pipeline->{'default'}}){
  $stage = $s if $s->{name} eq $stage_name;
}
my $stage_id = $stage->{id} || "645";
my $revision = "0";
my $version  = $Pipeline_Conf::pipeline_version.".".$revision;
my $params   = "--verbose --mem_host ".$Pipeline_Conf::memcache_host." --mem_key ".$Pipeline_Conf::memcache_key;

# options
my $job_num = "";
my $fasta   = "";
my $sims    = "";
my $ver     = "";
my $help    = "";
my $options = GetOptions ("job=i"    => \$job_num,
			  "sims:s"   => \$sims,
			  "version!" => \$ver,
			  "help!"    => \$help,
			 );

if ( $ver ) {
  print STDERR "$stage_name - $version - $stage_id\n";
  exit(0);
} elsif ( $help or ! $job_num ) {
  print STDERR "Usage: pipeline_$stage_name -j <job number> -s <sims file>\n";
  exit(1);
} 

my $log = Pipeline::logger($job_num);
$log->info("Starting $stage_name on job: $job_num");

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "running");

my $job_dir     = $Pipeline_Conf::global_job_dir."/".$job_num;
my $proc_dir    = $job_dir."/proc";
my $stage_dir   = $proc_dir."/".$stage_id.".".$stage_name;
my $results_dir = $job_dir."/".$Pipeline_Conf::results_dir;
my $run_dir     = $stage_dir;
my $hostname    = `hostname`;
chomp $hostname;

# create directories
if (-d $stage_dir) {
  my $t = time;
  $log->info("found $stage_dir, moving to $stage_dir.$t");
  move($stage_dir, $stage_dir.".".$t) or fail($log, "$!");
}
mkdir($stage_dir) or fail($log, "Could not mkdir: $stage_dir, $!");

# set cluster workspace dir
if (-d $Pipeline_Conf::cluster_workspace) {
  $run_dir = $Pipeline_Conf::cluster_workspace . "/$job_num.$stage_id.$stage_name";
  if (-d $run_dir) {
    system("rm -rf $run_dir");
  }
  mkdir($run_dir) or fail($log, "Could not mkdir: $run_dir, $!");
  system("echo $hostname > $stage_dir/hostname");
}
$log->info("Running on host $hostname, using dir $run_dir");

my $prefix    = $stage_id.".superblat";
my $err_file  = $stage_dir."/".$prefix.".err";
my $message   = "$stage_name failed on job: $job_num, see $err_file for details.";
my $sims_file = "$run_dir/$prefix.sims";
my $sims_old  = $sims_file.".old";
my $sims_new  = $sims_file.".new";

# get AWE results
unless ($sims && (-e $sims)) {
  my $awe_results_dir = $Pipeline_Conf::AWEdata."/".$job_num.".results";
  unless (-d $awe_results_dir) {
    quit_sims($run_dir, $stage_dir, $job_num, $stage_id, $stage_name, "no AWE results");
  }
  system("cat $awe_results_dir/* > $sims_file") == 0 or fail($log, 'AWE cat: '.$message);
  unless (-s $sims_file) {
    quit_sims($run_dir, $stage_dir, $job_num, $stage_id, $stage_name, "no sims found");
  }
}
else {
  unless (-s $sims) {
    quit_sims($run_dir, $stage_dir, $job_num, $stage_id, $stage_name, "no sims found");
  }
  system("cp $sims $sims_file") == 0 or fail($log, "cp $sims: ".$message);
}

# split sims
my $mch = new Cache::Memcached {'servers' => [$Pipeline_Conf::memcache_host], 'debug' => 0, 'compress_threshold' => 10_000};
unless ($mch) { fail($log, 'unable to connect to memcache: '.$message); }

open(INFILE, "<$sims_file") or fail($log, "Can't open file $sims_file: ".$message);
open(OLDFILE, ">$sims_old")  or fail($log, "Can't open file $sims_old: ".$message);
open(NEWFILE, ">$sims_new")  or fail($log, "Can't open file $sims_new: ".$message);
while (my $line = <INFILE>) {
  chomp $line;
  my ($frag, $md5, @rest) = split(/\t/, $line);
  my $data = $mch->get($md5.$Pipeline_Conf::memcache_key);
  if ($data && ref($data)) {
    print OLDFILE $line."\n";
  } else {
    print NEWFILE $line."\n";
  }
}
close NEWFILE;
close OLDFILE;
close INFILE;

# cleanup
move("$sims_old", "$results_dir/$prefix.sims.old") or fail($log, "Failed copy: $sims_old - $!");
move("$sims_new", "$results_dir/$prefix.sims.new") or fail($log, "Failed copy: $sims_new - $!");
chmod 0666, "$results_dir/$prefix.sims.old";
chmod 0666, "$results_dir/$prefix.sims.new";

# move run_dir to stage_dir if on local
if ($run_dir ne $stage_dir) {
  system("mv $run_dir/*.out $stage_dir/.");
  system("mv $run_dir/*.err $stage_dir/.");
  system("rm -rf $run_dir") == 0 or fail($log, "$stage_name failed on job: $job_num, can not remove $run_dir");
} else {
  my @run_files = `ls $run_dir`;
  chomp @run_files;
  map { system("rm $run_dir/$_") } grep { $_ !~ /\.(out|err)$/ } @run_files;
}

$log->info("Finished $stage_name on job: $job_num");

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "completed");

exit(0);

sub fail {
  my ($log, $message) = @_;
  Pipeline::update_stage_info($job_num, $stage_name, "error");
  $log->error($message);
  if ($run_dir ne $stage_dir) {
    system("mv $run_dir/* $stage_dir/.");
    system("rmdir $run_dir");
  }
  exit(1);
}

sub quit_sims {
  my ($run_dir, $stage_dir, $job_num, $stage_id, $stage_name, $msg) = @_;

  my $results_dir = $job_dir."/".$Pipeline_Conf::results_dir;
  my $prefix = $stage_id.".superblat";

  system("touch $results_dir/$prefix.sims.old");
  system("touch $results_dir/$prefix.sims.new");
  chmod 0666, "$results_dir/$prefix.sims.old";
  chmod 0666, "$results_dir/$prefix.sims.new";

  $log->info("Finished $stage_name on job: $job_num, empty results files: $msg");
  Pipeline::update_stage_info($job_num, $stage_name, "completed");
  exit(0);
}
