#!/usr/bin/env perl 

use strict;
use warnings;
no warnings('once');

use Pipeline;
use Pipeline_Conf;

use Getopt::Long;
use File::Copy;
use Data::Dumper;
umask 000;

my $stage="create_job";
my $revision = "0";
my $version = $Pipeline_Conf::pipeline_version.".".$revision;

# options
my $job_num = "";
my $uploaded_fasta = "";
my $fasta_file = "";
my $fastq_file = 0;
my $metadata_file = "";
my $pipeline_options = "";
my $ver = "";
my $help = "";
my $options = GetOptions ("job=i" => \$job_num,
			  "upload_fasta=s" => \$uploaded_fasta,
			  "fasta=s" => \$fasta_file,
			  "q!" => \$fastq_file,
			  "metadata:s" => \$metadata_file,
			  "pipeline_options:s" => \$pipeline_options,
			  "version" => \$ver,
			  "help" => \$help,
			 );
# raw and processed fasta

if ( $ver ) {
  print STDERR "$stage - $version\n";
  exit(0);
}

my $log = Pipeline::logger();

if ( $help or !($job_num and $fasta_file and $uploaded_fasta)){
  print STDERR "Usage: $stage -j <job number> -u <upload fasta> -f <processed fasta_file> -p <pipeline options> [-m <metadata_file>] [-q (bool: file is fastq)]\n";
  exit(1);
} elsif ( !(-e $fasta_file and -e $uploaded_fasta) ){
  $log->error("processed fasta file: $fasta_file or uploaded raw file: $uploaded_fasta does not exist");
  exit(1);
} elsif ( $metadata_file and !(-e $metadata_file) ){
  $log->error("metadata file: $metadata_file does not exist");
  exit(1);
}

if ( $fastq_file ) {
    $log->info("Creating job dir for job: $job_num , fastq: $fasta_file, metadata: $metadata_file, pipeline_options: $pipeline_options");
} else {
    $log->info("Creating job dir for job: $job_num , fasta: $fasta_file, metadata: $metadata_file, pipeline_options: $pipeline_options");
}

sub fail {
  my ($log, $message) = @_;
  $log->error($message);
  exit(1);
}

my $job_dir = Pipeline::get_job_dir($job_num);
my @dirs = ("metadata", "proc", "analysis", "raw", "images", "logs", "downloads");

# create directories
mkdir($job_dir) or fail($log, "Could not mkdir: $job_dir, $!");
for my $d (@dirs){
  mkdir($job_dir."/".$d) or fail($log, "Could not mkdir: $d, $!");
}

# create symlink to old dir
system("ln -s ../jobs/".Pipeline::get_job_suffix($job_num)."/".$job_num." ".$Pipeline_Conf::global_job_dir."/".$job_num) == 0 or fail($log, "Could not create symlink: , $!");

# create / set info file
my $jobinfo = Pipeline::get_jobcache_info($job_num);
my $info = Pipeline::info_file($job_dir."/".$job_num.".info");
for my $k (("job_id","metagenome_id","name","owner","file","file_size_raw","file_checksum_raw","public","created_on","options")) {
  $info->newval("Job", $k, $jobinfo->{$k});
}
$info->newval("Pipeline", "options", $pipeline_options || "none");
$info->RewriteConfig() or fail($log, "Could not write info file: @Config::IniFiles::errors");

# copy in files
if ( $fastq_file ) {
    # the fastq file is passed in as $fasta_file
    my $fastq = $fasta_file;
    copy($fastq, $job_dir."/raw/".$job_num.".fastq")  or fail($log, "Failed copy file: $fastq, $!");

    # the fasta file created during upload can be copied to the raw directory
    my $fasta = $fasta_file . '.fasta';
    if (-s $fasta) {
      copy($fasta, $job_dir."/raw/".$job_num.".fna")  or fail($log, "Failed copy file: $fasta, $!");
    }
} else {
  copy($fasta_file, $job_dir."/raw/".$job_num.".fna") or fail($log, "Failed copy file: $fasta_file, $!");
}
#copy($metadata_file, $job_dir."/metadata/".$job_num.".metadata") or fail($log, "Failed copy file: $metadata_file, $!");

# get a logger that has job logger
$log = Pipeline::logger($job_num);
$log->info("Successfully created job: $job_num");
exit(0);

