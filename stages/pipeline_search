#!/usr/bin/env perl 

use strict;
use warnings;
no warnings('once');

use Pipeline;
use Pipeline_Conf;

use Getopt::Long;
use File::Copy;
umask 000;

my $stage_name="search";
my $stage;
for my $s (@{$Pipeline_Conf::pipeline->{'default'}}) {
  $stage = $s if $s->{name} eq $stage_name; 
}
my $stage_id = $stage->{id};
my $revision = "0";
my $version  = $Pipeline_Conf::pipeline_version.".".$revision;
my $runcmd   = "parallel_search.py";

# options
my $job_num = "";
my $fasta   = "";
my $rna_nr  = $Pipeline_Conf::md5rna_clust;
my $proc    = 8;
my $size    = 100;
my $ident   = 70;
my $ver     = "";
my $help    = "";
my $options = GetOptions ("job=i"    => \$job_num,
			  "fasta=s"  => \$fasta,
			  "rna_nr=s" => \$rna_nr,
			  "proc:i"   => \$proc,
			  "size:i"   => \$size,
			  "ident:i"  => \$ident,
			  "version"  => \$ver,
			  "help"     => \$help,
			 );
if ( $ver ) {
  print STDERR "$stage_name - $version - $stage_id\n";
  exit(0);
} elsif ( $help or !($job_num and $fasta and $rna_nr)) {
  print STDERR "Usage: pipeline_$stage_name -j <job number> -f <fasta file> -r <rna NR condensed> [-p <process number, default $proc>] [-s <split size in MB, default $size>] [-i <identity match, default $ident>]\n";
  exit(1);
} 

my $log = Pipeline::logger($job_num);

unless ((-s $fasta) and (-s $rna_nr)) {
  fail($log, "file: $fasta or $rna_nr does not exist or is size zero");
} 

$log->info("Starting $stage_name on job: $job_num");

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "running");

my $job_dir     = $Pipeline_Conf::global_job_dir."/".$job_num;
my $proc_dir    = $job_dir."/proc";
my $stage_dir   = $proc_dir."/".$stage_id.".".$stage_name;
my $results_dir = $job_dir."/".$Pipeline_Conf::results_dir;
my $run_dir     = $stage_dir;
my $hostname    = `hostname`;
chomp $hostname;

# create directories
if (-d $stage_dir) {
  my $t = time;
  $log->info("found $stage_dir, moving to $stage_dir.$t");
  move($stage_dir, $stage_dir.".".$t) or fail($log, "$!");
}
mkdir($stage_dir) or fail($log, "Could not mkdir: $stage_dir, $!");

# set cluster workspace dir
if (-d $Pipeline_Conf::cluster_workspace) {
  $run_dir = $Pipeline_Conf::cluster_workspace . "/$job_num.$stage_id.$stage_name";
  if (-d $run_dir) {
    system("rm -rf $run_dir");
  }
  mkdir($run_dir) or fail($log, "Could not mkdir: $run_dir, $!");
  system("echo $hostname > $stage_dir/hostname");
}
$log->info("Running on host $hostname, using dir $run_dir");

my $prefix  = $stage_id.".".$stage_name;
my $message = "$stage_name failed on job: $job_num, see $stage_dir/$runcmd.out for details.";
my $input_fasta = "$prefix.input.fna";

system("cp $fasta $run_dir/$input_fasta >> $run_dir/$runcmd.out 2>&1") == 0 or fail($log, $message);
system("$runcmd -v -p $proc -s $size -i 0.$ident -d $run_dir $rna_nr $run_dir/$input_fasta $run_dir/$prefix.rna.fna >> $run_dir/$runcmd.out 2>&1") == 0 or fail($log, $message);

# copy output to somewhere
move("$run_dir/$prefix.rna.fna", "$results_dir/$prefix.rna.fna") or fail($log, "Failed copy: $run_dir/$prefix.rna.fna - $!");
chmod 0666, "$results_dir/$prefix.rna.fna";

# move run_dir to stage_dir if on local
if ($run_dir ne $stage_dir) {
  move("$run_dir/$runcmd.out", "$stage_dir/$runcmd.out") or fail($log, "Failed copy file: $runcmd.out - $!");
  system("rm -rf $run_dir") == 0 or fail($log, "$stage_name failed on job: $job_num, can not remove $run_dir");
} else {
  my @run_files = `ls $run_dir`;
  chomp @run_files;
  map { system("rm $run_dir/$_") } grep { $_ !~ /\.out$/ } @run_files;
}

$log->info("Finished $stage_name on job: $job_num");

# update jobcache stage status
Pipeline::update_stage_info($job_num, $stage_name, "completed");

exit(0);

sub fail {
  my ($log, $message) = @_;
  Pipeline::update_stage_info($job_num, $stage_name, "error");
  $log->error($message);
  if ($run_dir ne $stage_dir) {
    system("mv $run_dir/* $stage_dir/.");
    system("rmdir $run_dir");
  }
  exit(1);
}
