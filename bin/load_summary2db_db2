#!/usr/bin/env perl

use strict;
use warnings;

use DBI;
use Getopt::Long;

my $filename  = '';
my $data_type = '';
my $verbose = 0;
my $version = 7;
my $jobID   = '';
my $reload  = 0;
my $dbname  = "";
my $dbhost  = "";
my $dbuser  = "";
my $options = { md5      => "job_md5s",
		function => "job_functions",
		organism => "job_organisms",
		ontology => "job_ontologies",
		lca      => "job_lcas"
	      };
my $opt_str = join(" | ", sort keys %$options);
my $usage   = qq($0
load precomputed job data into database.

  --filename        source data    Required.
  --job             job id         Required.
  --type            data type      Required. $opt_str
  --seq-db-version  nr db version  Optional. Default is '$version'
  --dbhost          db user        Required. Server of database
  --dbname          db name        Required. Name of database
  --dbuser          db user        Required. Owner of database
  --verbose                        Optional. Verbose output.
  --reload                         Optional. Overwrite data if exists for job/version.

);

if ( (@ARGV > 0) && ($ARGV[0] =~ /-h/) ) { print STDERR $usage; exit 1; }
if ( ! &GetOptions ('verbose!'         => \$verbose, 
		            'filename=s'       => \$filename,
		            'type=s'           => \$data_type,
		            'seq-db-version:i' => \$version,
		            'job=i'            => \$jobID,
		            'dbhost:s'         => \$dbhost,
		            'dbname:s'         => \$dbname,
		            'dbuser:s'         => \$dbuser,
		            'reload!'          => \$reload
		           ) )
  { print STDERR $usage; exit 1; }

unless ($filename && $jobID && $data_type) {
  print STDERR $usage . "Missing parmater.\n"; exit 1;
}
unless (exists $options->{$data_type}) {
  print STDERR $usage . "Unknown type '$data_type'.\n"; exit 1;
}

my $dbh = DBI->connect("DBI:Pg:dbname=$dbname;host=$dbhost", $dbuser, '', {AutoCommit => 0 , RaiseError => 1});
unless ($dbh) { print STDERR "Error: ".DBI->errstr."\n"; exit 1; }

# Check if job-version combination already exists.
my $has_job = $dbh->selectcol_arrayref("SELECT count(*) FROM job_info WHERE job=$jobID AND version=$version");
$has_job = ($has_job && (@$has_job > 0)) ? $has_job->[0] : 0;

if ($has_job && (! $reload)) {
  print STDERR "Entry already exists in job_info for job=$jobID and version=$version, exiting.\n";
  exit 1;
} elsif (! $has_job) {
  # Load files into job_* tables
  &insert_job_abundances($dbh, $filename, $data_type);

  # Insert row in job_info with loaded = true
  print "Inserting job=$jobID, version=$version and loaded=true into job_info table... " if ($verbose);
  $dbh->do("INSERT INTO job_info (version, job, loaded) VALUES ('$version', '$jobID', true)");
  $dbh->commit;

} elsif ($has_job && $reload) {
  # Update row in job_info to loaded = false
  print "Updating job_info to loaded = false where job=$jobID and version=$version... " if ($verbose);
  $dbh->do("UPDATE job_info SET loaded = false WHERE job=$jobID AND version=$version)");
  $dbh->commit;

  # Delete entries from job_* tables with this job and version
  $dbh->do("DELETE FROM job_md5s WHERE job=$jobID AND version=$version");
  $dbh->do("DELETE FROM job_functions WHERE job=$jobID AND version=$version");
  $dbh->do("DELETE FROM job_organisms WHERE job=$jobID AND version=$version");
  $dbh->do("DELETE FROM job_ontologies WHERE job=$jobID AND version=$version");
  $dbh->do("DELETE FROM job_lcas WHERE job=$jobID AND version=$version");
  print "Deleting from job_md5s where job=$jobID and version=$version" if ($verbose);
  print "Deleting from job_functions where job=$jobID and version=$version" if ($verbose);
  print "Deleting from job_organisms where job=$jobID and version=$version" if ($verbose);
  print "Deleting from job_ontologies where job=$jobID and version=$version" if ($verbose);
  print "Deleting from job_lcas where job=$jobID and version=$version" if ($verbose);
  $dbh->commit;
  
  # Load files into job_* tables
  &insert_job_abundances($dbh, $filename, $data_type);

  # Update row in job_info to loaded = true
  print "Updating job_info to loaded = true where job=$jobID and version=$version... " if ($verbose);
  $dbh->do("UPDATE job_info SET loaded = true WHERE job=$jobID AND version=$version)");
  $dbh->commit;
  print "Done.\n" if ($verbose);
}

print "Done.\n" if ($verbose);
$dbh->disconnect;
exit 0;

# Still need to update the database indexes after entering new rows.
sub update_indexes {
}

sub insert_job_abundances {
  my ($dbh, $file, $data_type) = @_;

  my $table = $options->{$data_type};

  my ($num, $name, $end);
  my $columns = "version,job,abundance,exp_avg,exp_stdv,len_avg,len_stdv,ident_avg,ident_stdv";
  
  if    ($data_type eq "md5")      { $columns = "md5,".$columns.",seek,length,is_protein"; }
  elsif ($data_type eq "function") { $columns = "id,".$columns.",md5s"; }
  elsif ($data_type eq "organism") { $columns = "id,".$columns.",md5s,source"; }
  elsif ($data_type eq "ontology") { $columns = "id,".$columns.",md5s,source"; }
  elsif ($data_type eq "lca")      { $columns = "lca,".$columns.",md5s,level"; }
  else { print STDERR "ERROR:\tinvalid table type: $data_type"; exit 1; }

  my $copy_cmd = "COPY $table ($columns) FROM STDIN WITH NULL AS ''";

  if ( open(DATA, "<$file") ) {
    print "Running $copy_cmd ... " if ($verbose);
    $dbh->do($copy_cmd);
    while (my $line = <DATA>) {
      $dbh->pg_putcopydata($line) if $line;
    }
    my $res = $dbh->pg_putcopyend();
    unless ($res) {
      print STDERR "Error with COPY: ".DBI->errstr."\n"; exit 1;
    }
    $dbh->commit;
    close(DATA);
    print " Done\n" if ($verbose);
  } else {
    print STDERR "Error: can not read file $file: $!\n"; exit 1;
  }
}
